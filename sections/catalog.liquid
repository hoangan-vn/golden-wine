{{ 'component-card.css' | asset_url | stylesheet_tag }}

<div class="page-width">
  <div class="title-bar catalog-head" style="display:flex; align-items:flex-start; justify-content:space-between; gap:16px; margin-top:32px;">
    <div class="catalog-head__left" style="flex:1 1 auto;">
      <div class="catalog-head__row" style="display:flex; align-items:center; gap:12px;">
        <h1 id="catalog-title" class="catalog-head__title title title--primary" style="margin:0; font-size:2.4rem;">Goldenwine Catalog</h1>
        <span class="catalog-head__line" style="display:block; height:2px; background:#d8c9a3; flex:1 1 auto; opacity:.8;"></span>
      </div>
      <div id="catalog-subtitle" class="catalog-head__subtitle" style="font-size:1.1rem; color:#6b6b6b; margin-top:10px;"></div>
    </div>
    <div class="catalog-head__controls">
      <label for="catalog-category" class="visually-hidden">Chọn danh mục</label>
      <select id="catalog-category" class="catalog-select is-hidden" style="min-width:220px;">
        <option value="">Chọn danh mục</option>
        {%- for collection in collections -%}
          <option value="{{ collection.handle }}">{{ collection.title }}</option>
        {%- endfor -%}
      </select>
      <div id="catalog-dropdown" class="catalog-dropdown" aria-expanded="false">
        <button type="button" class="catalog-dropdown__button" aria-haspopup="listbox" aria-expanded="false">
          <span class="catalog-dropdown__label">Chọn danh mục</span>
          <span class="catalog-dropdown__chevron">▾</span>
        </button>
        <div class="catalog-dropdown__menu" role="listbox" aria-activedescendant="">
        </div>
      </div>
      <div id="catalog-error" class="catalog-error" style="display:none; margin-top:6px; font-size:12px; color:#d32f2f;">Vui lòng chọn danh mục.</div>
    </div>
  </div>

  <div id="catalog-grid" class="grid grid--2-col-tablet-down grid--4-col-desktop" style="margin-top: 16px;"></div>

  <div class="catalog-nav" style="display:flex; justify-content:space-between; align-items:center; gap:16px; padding: 12px; margin-top: 12px;">
    <button id="catalog-prev" type="button" class="catalog-nav__btn" style="background:#fff; border:1px solid #ddd; border-radius:8px; padding:10px 14px; cursor:pointer;">
      <span style="margin-right:6px;">&larr;</span> {{ 'catalog_nav.prev' | t }}
    </button>
    <button id="catalog-next" type="button" class="catalog-nav__btn" style="background:#fff; border:1px solid #ddd; border-radius:8px; padding:10px 14px; cursor:pointer;">
      {{ 'catalog_nav.next' | t }} <span style="margin-left:6px;">&rarr;</span>
    </button>
  </div>
</div>

<script>
  (function() {
    var selectEl = document.getElementById('catalog-category');
    var titleEl = document.getElementById('catalog-title');
    var subtitleEl = document.getElementById('catalog-subtitle');
    var gridEl = document.getElementById('catalog-grid');
    var errorEl = document.getElementById('catalog-error');
    var prevBtn = document.getElementById('catalog-prev');
    var nextBtn = document.getElementById('catalog-next');
    var dropdown = document.getElementById('catalog-dropdown');
    var dropdownBtn = dropdown.querySelector('.catalog-dropdown__button');
    var dropdownLabel = dropdown.querySelector('.catalog-dropdown__label');
    var dropdownMenu = dropdown.querySelector('.catalog-dropdown__menu');

    // Build handle -> title map from options
    var collectionMap = {};
    Array.prototype.forEach.call(selectEl.options, function(opt) {
      collectionMap[opt.value] = opt.text;
    });

    function buildDropdownFromSelect() {
      var html = '';
      for (var i = 0; i < selectEl.options.length; i++) {
        var opt = selectEl.options[i];
        if (!opt.value) continue;
        html += '<div class="catalog-dropdown__item" role="option" data-value="' + opt.value + '">' + opt.text + '</div>';
      }
      dropdownMenu.innerHTML = html;
    }

    function getSelectedHandle() {
      var params = new URLSearchParams(window.location.search);
      var handle = params.get('c');
      if (!handle || !collectionMap[handle]) {
        // Fallback to first non-empty option (skip placeholder)
        var firstValid = '';
        for (var i = 0; i < selectEl.options.length; i++) {
          var val = selectEl.options[i].value;
          if (val && collectionMap[val]) { firstValid = val; break; }
        }
        handle = firstValid;
      }
      return handle;
    }

    function setSelectedHandle(handle) {
      selectEl.value = handle || '';
      // Keep main title as-is; update subtitle to current selection
      subtitleEl.textContent = collectionMap[handle] || '';
      dropdownLabel.textContent = collectionMap[handle] || 'Chọn danh mục';
      Array.prototype.forEach.call(dropdownMenu.querySelectorAll('.catalog-dropdown__item'), function(el){
        el.setAttribute('aria-selected', el.getAttribute('data-value') === handle ? 'true' : 'false');
      });
      var params = new URLSearchParams(window.location.search);
      if (handle) {
        params.set('c', handle);
      } else {
        params.delete('c');
      }
      var qs = params.toString();
      var newUrl = window.location.pathname + (qs ? ('?' + qs) : '') + window.location.hash;
      window.history.replaceState({}, '', newUrl);
    }

    function renderLoading() {
      gridEl.innerHTML = '<div class="loading-overlay gradient" style="width:100%;min-height:120px;"></div>';
    }

    function loadCollection(handle) {
      if (!handle) {
        gridEl.innerHTML = '';
        errorEl.style.display = 'block';
        selectEl.classList.add('catalog-select--error');
        return;
      }
      errorEl.style.display = 'none';
      selectEl.classList.remove('catalog-select--error');
      renderLoading();
      fetch('/collections/' + encodeURIComponent(handle) + '?view=catalog-grid', { credentials: 'same-origin' })
        .then(function(r){ return r.text(); })
        .then(function(html){
          gridEl.innerHTML = html;
          // Equalize heights after content is inserted and images load
          requestAnimationFrame(equalizeCardHeights);
          Array.prototype.forEach.call(gridEl.querySelectorAll('img'), function(img){
            if (img.complete) return;
            img.addEventListener('load', equalizeCardHeights, { once: true });
            img.addEventListener('error', equalizeCardHeights, { once: true });
          });
        })
        .catch(function(){ gridEl.innerHTML = '<p>Không thể tải sản phẩm.</p>'; });
    }

    selectEl.addEventListener('change', function(e) {
      var chosen = e.target.value;
      if (!chosen) {
        // auto-select first valid if user picks placeholder
        chosen = getSelectedHandle();
      }
      setSelectedHandle(chosen);
      loadCollection(chosen);
    });

    function toggleDropdown(open) {
      var willOpen = typeof open === 'boolean' ? open : dropdown.getAttribute('aria-expanded') !== 'true';
      dropdown.setAttribute('aria-expanded', willOpen ? 'true' : 'false');
      dropdownBtn.setAttribute('aria-expanded', willOpen ? 'true' : 'false');
    }

    dropdownBtn.addEventListener('click', function(){ toggleDropdown(); });
    document.addEventListener('click', function(e){ if (!dropdown.contains(e.target)) toggleDropdown(false); });
    dropdownMenu.addEventListener('click', function(e){
      var item = e.target.closest('.catalog-dropdown__item');
      if (!item) return;
      var value = item.getAttribute('data-value');
      setSelectedHandle(value);
      loadCollection(value);
      toggleDropdown(false);
    });

    function getValidOptions() {
      var list = [];
      for (var i = 0; i < selectEl.options.length; i++) {
        var v = selectEl.options[i].value;
        if (v && collectionMap[v]) list.push(v);
      }
      return list;
    }

    function navigate(step) {
      var options = getValidOptions();
      if (!options.length) return;
      var current = selectEl.value && collectionMap[selectEl.value] ? selectEl.value : options[0];
      var idx = Math.max(0, options.indexOf(current));
      var nextIdx = idx + step;
      if (nextIdx < 0) nextIdx = options.length - 1; // vòng lại cuối
      if (nextIdx >= options.length) nextIdx = 0; // vòng lại đầu
      var handle = options[nextIdx];
      setSelectedHandle(handle);
      loadCollection(handle);
    }

    prevBtn.addEventListener('click', function(){ navigate(-1); });
    nextBtn.addEventListener('click', function(){ navigate(1); });

    function equalizeCardHeights(){
      var cards = gridEl.querySelectorAll('.catalog-card');
      if (!cards.length) return;
      // Reset heights to natural to measure correctly
      Array.prototype.forEach.call(cards, function(c){ c.style.height = 'auto'; });
      // Find tallest card in CURRENT CATEGORY (entire grid)
      var maxH = 0;
      Array.prototype.forEach.call(cards, function(c){ maxH = Math.max(maxH, c.offsetHeight); });
      // Apply same height to all cards in this category
      Array.prototype.forEach.call(cards, function(c){ c.style.height = maxH + 'px'; });
    }

    window.addEventListener('resize', function(){
      // Debounce resize
      clearTimeout(window.__catalogResizeTimer);
      window.__catalogResizeTimer = setTimeout(equalizeCardHeights, 150);
    });

    // Init from URL or default first option
    buildDropdownFromSelect();
    var initialHandle = getSelectedHandle();
    setSelectedHandle(initialHandle);
    loadCollection(initialHandle);
  })();
</script>

{% schema %}
{
  "name": "Catalog",
  "tag": "section",
  "class": "section",
  "settings": []
}
{% endschema %}


